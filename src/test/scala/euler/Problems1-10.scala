package euler

/**
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 *
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
class Problem1 extends Problem(1) {
  def solve: Any = (1 to 1000).filter(x => x % 3 == 0 || x % 5 == 0).sum
}

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
class Problem2 extends Problem(2) {
  def solve: Any = Utils.fibonacci.takeWhile(x => x < 4000000).filter(x => x % 2 == 0).sum
}

/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
 *
 * What is the largest prime factor of the number 600851475143 ?
 */
class Problem3 extends Problem(3) {
  def solve: Any = {
    def lpf(x: Long, d: Long, p: Long): Long = {
      if (d > x) p
      else if (x % d == 0) lpf(x / d, d + 1, d)
      else lpf(x, d + 1, p)
    }
    lpf(600851475143L, 2, 1)
  }
}

/**
 * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 *
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
class Problem4 extends Problem(4) {
  def solve: Any = {
    val nums = 100 to 999
    def isPalindrome(x: Int): Boolean = x.toString.reverse == x.toString
    nums.map(a => nums.map(b => b * a).filter(x => isPalindrome(x))).flatten.sorted(Ordering[Int].reverse).head
  }
}

/**
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 *
 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
class Problem5 extends Problem(5) {
  def solve: Any = 2520 * 11 * 13 * 17 * 19 * 2
}

/**
 * The sum of the squares of the first ten natural numbers is,
 * 1¹ + 2¹ + ... + 10¹ = 385
 *
 * The square of the sum of the first ten natural numbers is,
 * (1 + 2 + ... + 10)¹ = 552 = 3025
 *
 * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
 *
 * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
class Problem6 extends Problem(6) {
  val nums = 1 to 100
  val sum = nums.sum
  def solve: Any = sum * sum - nums.map(x => x * x).sum
}

/**
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 *
 * What is the 10001st prime number?
 */
class Problem7 extends Problem(7) {
  def solve: Any = {
    Utils.primes(10000)
  }
}

/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 *
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 *
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
class Problem8 extends Problem(8) {
  def solve: Any = {
    val numString =
      "73167176531330624919225119674426574742355349194934" +
        "96983520312774506326239578318016984801869478851843" +
        "85861560789112949495459501737958331952853208805511" +
        "12540698747158523863050715693290963295227443043557" +
        "66896648950445244523161731856403098711121722383113" +
        "62229893423380308135336276614282806444486645238749" +
        "30358907296290491560440772390713810515859307960866" +
        "70172427121883998797908792274921901699720888093776" +
        "65727333001053367881220235421809751254540594752243" +
        "52584907711670556013604839586446706324415722155397" +
        "53697817977846174064955149290862569321978468622482" +
        "83972241375657056057490261407972968652414535100474" +
        "82166370484403199890008895243450658541227588666881" +
        "16427171479924442928230863465674813919123162824586" +
        "17866458359124566529476545682848912883142607690042" +
        "24219022671055626321111109370544217506941658960408" +
        "07198403850962455444362981230987879927244284909188" +
        "84580156166097919133875499200524063689912560717606" +
        "05886116467109405077541002256983155200055935729725" +
        "71636269561882670428252483600823257530420752963450"

    numString.sliding(13).map(_.map(_.toLong - 48).product).max
  }
}

/**
 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 * a^2 + b^2 = c^2
 *
 * For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
 *
 * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
 * Find the product abc.
 */
class Problem9 extends Problem(9) {
  def solve: Any = {
    (for {
      c <- 1000 to 1 by -1
      b <- c to 1 by -1
      a <- c to 1 by -1
      if (a * a + b * b == c * c) && (a + b + c == 1000)
    } yield a * b * c).take(1)(0)
  }
}

/**
 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 *
 * Find the sum of all the primes below two million.
 */
class Problem10 extends Problem(10) {
  def solve: Any = (2L to 2000000).filter(SimplePrimeCheck.isPrime).sum
}