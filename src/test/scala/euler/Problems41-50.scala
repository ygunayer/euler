package euler

import Utils.RichInt;

/**
 * We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.
 *
 * What is the largest n-digit pandigital prime that exists?
 */
class Problem41 extends Problem(41) {
  def solve: Any = {
    val limit = 7654321 // all 8 and 9 digit pandigitals are divisible by 3
    val sieve = new SievedPrimeCheck(limit)

    def isPandigital(x: Int): Boolean = {
      val s = x.toString
      val n = s.size
      (1 to n).mkString("") == s.sorted
    }

    (limit to 1 by -1).filter(n => isPandigital(n) && sieve.isPrime(n)).take(1)(0)
  }
}

/**
 * The nth term of the sequence of triangle numbers is given by, t_n = n*(n+1)/2; so the first ten triangle numbers are:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.
 *
 * Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?
 */
class Problem42 extends Problem(42) {
  def solve: Any = {
    val offset = 'A'.toInt
    val triangles = (1 to 26).map(n => n * (n + 1) / 2).toList

    def isTriangle(s: String): Boolean = triangles.contains(s.map(_.toInt - offset + 1).sum)

    lazy val words = problem42Words.getLines.next.split(",").sorted
    words.filter(isTriangle).size
  }
}

/**
 * The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.
 *
 * Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:
 *
 * d2d3d4=406 is divisible by 2
 * d3d4d5=063 is divisible by 3
 * d4d5d6=635 is divisible by 5
 * d5d6d7=357 is divisible by 7
 * d6d7d8=572 is divisible by 11
 * d7d8d9=728 is divisible by 13
 * d8d9d10=289 is divisible by 17
 *
 * Find the sum of all 0 to 9 pandigital numbers with this property.
 */
class Problem43 extends Problem(43) {
  def solve: Any = {
    val divisors = List(2, 3, 5, 7, 11, 13, 17)
    def isValid(s: String): Boolean = s.sliding(3).drop(1).zipWithIndex.forall({ case (l, i) => l.mkString("").toInt % divisors(i) == 0 })
    lazy val pandigitals = "0123456789".permutations.filter(s => s(0) != '0')
    pandigitals.filter(isValid).map(_.toLong).sum
  }
}

/**
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 *
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 *
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
 */
class Problem44 extends Problem(44) {
  def solve: Any = {

    def p(n: Long): Long = (3 * n * n - n) / 2

    case class Result(j: Long, k: Long, pj: Long, pk: Long, sum: Long, diff: Long)

    val lim = 10000
    // keeping j and k as close as possible should guarantee that the diff is the smallest
    val results = for {
      j <- 1 to lim
      k <- j to 1 by -1
      pj = p(j)
      pk = p(k)
      sum = pj + pk
      diff = pj - pk
      if (Utils.isPentagonal(sum) && Utils.isPentagonal(diff))
    } yield Result(j, k, pj, pk, sum, diff)

    results.take(1).head.diff
  }
}

/**
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 * Triangle: Tn=n(n+1)/2 -> 1, 3, 6, 10, 15, ...
 * Pentagonal: Pn=n(3n−1)/2 -> 1, 5, 12, 22, 35, ...
 * Hexagonal: Hn=n(2n−1) -> 1, 6, 15, 28, 45, ...
 *
 * It can be verified that T(285) = P(165) = H(143) = 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal.
 */
class Problem45 extends Problem(45) {
  def solve: Any = {
    // every hexagonal number is also a triangular number
    // see: http://mathforum.org/workshops/usi/pascal/pascal_hexagonal.html
    def h(n: Long): Long = n * (2 * n - 1)
    
    case class Foo(n: Long, hn: Long)
    
    // based on this assumption we can simply check if a number's both hexagonal and pentagonal at the same time
    Stream.from(144).map(n => Foo(n, h(n))).filter(f => Utils.isPentagonal(f.hn)).head
  }
}